// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String          @id @map("_id")
  username              String          @unique
  avatar                String?
  cover                 String?
  name                  String?
  surname               String?
  description           String?
  city                  String?
  school                String?
  work                  String?
  website               String?
  createdAt             DateTime        @default(now())
  posts                 Post[]
  comments              Comment[]
  likes                 Like[]
  followers             Follower[]      @relation("UserFollowers")
  followings            Follower[]      @relation("UserFollowings")
  followRequestSent     FollowRequest[] @relation("FollowRequestSent")
  followRequestReceived FollowRequest[] @relation("FollowRequestReceived")
  blocks                Block[]         @relation("BlocksSent")
  blockedBy             Block[]         @relation("BlocksReceived")
  stories               Story[]
}

model Post {
  id        String    @id @default(uuid()) @map("_id")
  desc      String
  img       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  likes     Like[]
  comments  Comment[]
}

model Comment {
  id        String   @id @default(uuid()) @map("_id")
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  likes     Like[]
}

model Like {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?
}

model Follower {
  id          String   @id @default(uuid()) @map("_id")
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
}

model FollowRequest {
  id         String   @id @default(uuid()) @map("_id")
  createdAt  DateTime @default(now())
  sender     User     @relation("FollowRequestSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User     @relation("FollowRequestReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  @@unique([senderId, receiverId])
}

model Block {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())
  blocker   User     @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked   User     @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  @@unique([blockerId, blockedId])
}

model Story {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())
  expiresAt DateTime
  img       String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}
