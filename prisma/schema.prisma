// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @map("_id")
  username    String    @unique
  avatar      String?
  cover       String?
  name        String?
  surname     String?
  description String?
  city        String?
  school      String?
  work        String?
  website     String?
  createdAt   DateTime  @default(now())
  posts       Post[]
  comments    Comment[]
  likes       Like[]
}

model Post {
  id        String    @id @default(uuid()) @map("_id")
  desc      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  likes     Like[]
  Comment   Comment[]
}

model Comment {
  id        String   @id @default(uuid()) @map("_id")
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  likes     Like[]
}

model Like {
  id        String   @id @default(uuid()) @map("_id")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
}
